# This file is interpreted as shell script.
# Put your custom iptables rules here, they will
# be executed with each firewall (re-)start.

# Internal uci firewall chains are flushed and recreated on reload, so
# put custom rules into the root chains e.g. INPUT or FORWARD or into the
# special user chains, e.g. input_wan_rule or postrouting_lan_rule.

# Set up transparent proxy settings

CACHE_ENABLE=`uci get rachel.setup.cache_enable`
OCTET123=`uci get network.lan.ipaddr | cut -d = -f 2 | cut -d . -f 1,2,3`

if [ $CACHE_ENABLE = "checked" ]; then
	uci set firewall.proxy.src="lan"
	uci set firewall.proxy.src_dport="80"
	uci set firewall.proxy.dest_port="8888"
	uci set firewall.proxy.proto="tcp"
	uci set firewall.proxy.src_dip="!"$OCTET123".254"
	uci set firewall.proxy.dest_ip=$OCTET123".254"
else
	uci set firewall.proxy.src=" "
	uci set firewall.proxy.src_dport=" "
	uci set firewall.proxy.dest_port=" "
	uci set firewall.proxy.proto=" "
	uci set firewall.proxy.src_dip=" "
	uci set firewall.proxy.dest_ip=" "
fi

# Set up DNS Filter capture for DNS requests

DNSFILTER_ENABLE=`uci get secn.dnsfilter.enable`
if [ $DNSFILTER_ENABLE = "checked" ]; then
	iptables -t nat -A PREROUTING	-i br-lan -p udp --dport 53 -j REDIRECT --to-port 53
	iptables -t nat -A PREROUTING	-i br-lan -p tcp --dport 53 -j REDIRECT --to-port 53
fi

uci commit firewall

